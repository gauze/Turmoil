BANK 0
EQU $00 
LABEL $C800 Vec_Snd_Shadow
COMMENT_LABEL $C800 Shadow of sound chip registers (15 bytes)
LABEL $C80F Vec_Btn_State
COMMENT_LABEL $C80F Current state of all joystick buttons
LABEL $C810 Vec_Prev_Btns
COMMENT_LABEL $C810 Previous state of all joystick buttons
LABEL $C811 Vec_Buttons
COMMENT_LABEL $C811 Current toggle state of all buttons
LABEL $C812 Vec_Button_1_1
COMMENT_LABEL $C812 Current toggle state of stick 1 button 1
LABEL $C813 Vec_Button_1_2
COMMENT_LABEL $C813 Current toggle state of stick 1 button 2
LABEL $C814 Vec_Button_1_3
COMMENT_LABEL $C814 Current toggle state of stick 1 button 3
LABEL $C815 Vec_Button_1_4
COMMENT_LABEL $C815 Current toggle state of stick 1 button 4
LABEL $C816 Vec_Button_2_1
COMMENT_LABEL $C816 Current toggle state of stick 2 button 1
LABEL $C817 Vec_Button_2_2
COMMENT_LABEL $C817 Current toggle state of stick 2 button 2
LABEL $C818 Vec_Button_2_3
COMMENT_LABEL $C818 Current toggle state of stick 2 button 3
LABEL $C819 Vec_Button_2_4
COMMENT_LABEL $C819 Current toggle state of stick 2 button 4
LABEL $C81A Vec_Joy_Resltn
COMMENT_LABEL $C81A Joystick A/D resolution ($80=min $00=max)
LABEL $C81B Vec_Joy_1_X
COMMENT_LABEL $C81B Joystick 1 left/right
LABEL $C81C Vec_Joy_1_Y
COMMENT_LABEL $C81C Joystick 1 up/down
LABEL $C81D Vec_Joy_2_X
COMMENT_LABEL $C81D Joystick 2 left/right
LABEL $C81E Vec_Joy_2_Y
COMMENT_LABEL $C81E Joystick 2 up/down
LABEL $C81F Vec_Joy_Mux
COMMENT_LABEL $C81F Joystick enable/mux flags (4 bytes)
LABEL $C81F Vec_Joy_Mux_1_X
COMMENT_LABEL $C81F Joystick 1 X enable/mux flag (=1)
LABEL $C820 Vec_Joy_Mux_1_Y
COMMENT_LABEL $C820 Joystick 1 Y enable/mux flag (=3)
LABEL $C821 Vec_Joy_Mux_2_X
COMMENT_LABEL $C821 Joystick 2 X enable/mux flag (=5)
LABEL $C822 Vec_Joy_Mux_2_Y
COMMENT_LABEL $C822 Joystick 2 Y enable/mux flag (=7)
LABEL $C823 Vec_Misc_Count
COMMENT_LABEL $C823 Misc counter/flag byte, zero when not in use
LABEL $C824 Vec_0Ref_Enable
COMMENT_LABEL $C824 Check0Ref enable flag
LABEL $C825 Vec_Loop_Count
COMMENT_LABEL $C825 Loop counter word (incremented in Wait_Recal)
LABEL $C827 Vec_Brightness
COMMENT_LABEL $C827 Default brightness
LABEL $C828 Vec_Dot_Dwell
COMMENT_LABEL $C828 Dot dwell time?
LABEL $C829 Vec_Pattern
COMMENT_LABEL $C829 Dot pattern (bits)
LABEL $C82A Vec_Text_HW
COMMENT_LABEL $C82A Default text height and width
LABEL $C82A Vec_Text_Height
COMMENT_LABEL $C82A Default text height
LABEL $C82B Vec_Text_Width
COMMENT_LABEL $C82B Default text width
LABEL $C82C Vec_Str_Ptr
COMMENT_LABEL $C82C Temporary string pointer for Print_Str
LABEL $C82E Vec_Counters
COMMENT_LABEL $C82E Six bytes of counters
LABEL $C82E Vec_Counter_1
COMMENT_LABEL $C82E First  counter byte
LABEL $C82F Vec_Counter_2
COMMENT_LABEL $C82F Second counter byte
LABEL $C830 Vec_Counter_3
COMMENT_LABEL $C830 Third  counter byte
LABEL $C831 Vec_Counter_4
COMMENT_LABEL $C831 Fourth counter byte
LABEL $C832 Vec_Counter_5
COMMENT_LABEL $C832 Fifth  counter byte
LABEL $C833 Vec_Counter_6
COMMENT_LABEL $C833 Sixth  counter byte
LABEL $C834 Vec_RiseRun_Tmp
COMMENT_LABEL $C834 Temp storage word for rise/run
LABEL $C836 Vec_Angle
COMMENT_LABEL $C836 Angle for rise/run and rotation calculations
LABEL $C837 Vec_Run_Index
COMMENT_LABEL $C837 Index pair for run
LABEL $C839 Vec_Rise_Index
COMMENT_LABEL $C839 Index pair for rise
LABEL $C83B Vec_RiseRun_Len
COMMENT_LABEL $C83B length for rise/run
LABEL $C83D Vec_Rfrsh
COMMENT_LABEL $C83D Refresh time (divided by 1.5MHz)
LABEL $C83D Vec_Rfrsh_lo
COMMENT_LABEL $C83D Refresh time low byte
LABEL $C83E Vec_Rfrsh_hi
COMMENT_LABEL $C83E Refresh time high byte
LABEL $C83F Vec_Music_Work
COMMENT_LABEL $C83F Music work buffer (14 bytes, backwards?)
LABEL $C842 Vec_Music_Wk_A
COMMENT_LABEL $C842 register 10
LABEL $C845 Vec_Music_Wk_7
COMMENT_LABEL $C845 register 7
LABEL $C846 Vec_Music_Wk_6
COMMENT_LABEL $C846 register 6
LABEL $C847 Vec_Music_Wk_5
COMMENT_LABEL $C847 register 5
LABEL $C84B Vec_Music_Wk_1
COMMENT_LABEL $C84B register 1
LABEL $C84D Vec_Freq_Table
COMMENT_LABEL $C84D Pointer to note-to-frequency table (normally $FC8D)
LABEL $C84F Vec_Max_Players
COMMENT_LABEL $C84F Maximum number of players for Select_Game
LABEL $C850 Vec_Max_Games
COMMENT_LABEL $C850 Maximum number of games for Select_Game
LABEL $C84F Vec_ADSR_Table
COMMENT_LABEL $C84F Storage for first music header word (ADSR table)
LABEL $C851 Vec_Twang_Table
COMMENT_LABEL $C851 Storage for second music header word ('twang' table)
LABEL $C853 Vec_Music_Ptr
COMMENT_LABEL $C853 Music data pointer
LABEL $C853 Vec_Expl_ChanA
COMMENT_LABEL $C853 Used by Explosion_Snd - bit for first channel used?
LABEL $C854 Vec_Expl_Chans
COMMENT_LABEL $C854 Used by Explosion_Snd - bits for all channels used?
LABEL $C855 Vec_Music_Chan
COMMENT_LABEL $C855 Current sound channel number for Init_Music
LABEL $C856 Vec_Music_Flag
COMMENT_LABEL $C856 Music active flag ($00=off $01=start $80=on)
LABEL $C857 Vec_Duration
COMMENT_LABEL $C857 Duration counter for Init_Music
LABEL $C858 Vec_Music_Twang
COMMENT_LABEL $C858 3 word 'twang' table used by Init_Music
LABEL $C858 Vec_Expl_1
COMMENT_LABEL $C858 Four bytes copied from Explosion_Snd's U-reg parameters
LABEL $C859 Vec_Expl_2
LABEL $C85A Vec_Expl_3
LABEL $C85B Vec_Expl_4
LABEL $C85C Vec_Expl_Chan
COMMENT_LABEL $C85C Used by Explosion_Snd - channel number in use?
LABEL $C85D Vec_Expl_ChanB
COMMENT_LABEL $C85D Used by Explosion_Snd - bit for second channel used?
LABEL $C85E Vec_ADSR_Timers
COMMENT_LABEL $C85E ADSR timers for each sound channel (3 bytes)
LABEL $C861 Vec_Music_Freq
COMMENT_LABEL $C861 Storage for base frequency of each channel (3 words)
LABEL $C867 Vec_Expl_Flag
COMMENT_LABEL $C867 Explosion_Snd initialization flag?
LABEL $C877 Vec_Expl_Timer
COMMENT_LABEL $C877 Used by Explosion_Snd
LABEL $C879 Vec_Num_Players
COMMENT_LABEL $C879 Number of players selected in Select_Game
LABEL $C87A Vec_Num_Game
COMMENT_LABEL $C87A Game number selected in Select_Game
LABEL $C87B Vec_Seed_Ptr
COMMENT_LABEL $C87B Pointer to 3-byte random number seed (=$C87D)
LABEL $C87D Vec_Random_Seed
COMMENT_LABEL $C87D Default 3-byte random number seed
LABEL $CBEA Vec_Default_Stk
COMMENT_LABEL $CBEA Default top-of-stack
LABEL $CBEB Vec_High_Score
COMMENT_LABEL $CBEB High score storage (7 bytes)
LABEL $CBF2 Vec_SWI3_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF2 Vec_SWI2_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF5 Vec_FIRQ_Vector
COMMENT_LABEL $CBF5 FIRQ interrupt vector (3 bytes)
LABEL $CBF8 Vec_IRQ_Vector
COMMENT_LABEL $CBF8 IRQ interrupt vector (3 bytes)
LABEL $CBFB Vec_SWI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFB Vec_NMI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFE Vec_Cold_Flag
COMMENT_LABEL $CBFE Cold start flag (warm start if = $7321)
LABEL $D000 VIA_port_b
COMMENT_LABEL $D000 VIA port B data I/O register
LABEL $D001 VIA_port_a
COMMENT_LABEL $D001 VIA port A data I/O register (handshaking)
LABEL $D002 VIA_DDR_b
COMMENT_LABEL $D002 VIA port B data direction register (0=input 1=output)
LABEL $D003 VIA_DDR_a
COMMENT_LABEL $D003 VIA port A data direction register (0=input 1=output)
LABEL $D004 VIA_t1_cnt_lo
COMMENT_LABEL $D004 VIA timer 1 count register lo (scale factor)
LABEL $D005 VIA_t1_cnt_hi
COMMENT_LABEL $D005 VIA timer 1 count register hi
LABEL $D006 VIA_t1_lch_lo
COMMENT_LABEL $D006 VIA timer 1 latch register lo
LABEL $D007 VIA_t1_lch_hi
COMMENT_LABEL $D007 VIA timer 1 latch register hi
LABEL $D008 VIA_t2_lo
COMMENT_LABEL $D008 VIA timer 2 count/latch register lo (refresh)
LABEL $D009 VIA_t2_hi
COMMENT_LABEL $D009 VIA timer 2 count/latch register hi
LABEL $D00A VIA_shift_reg
COMMENT_LABEL $D00A VIA shift register
LABEL $D00B VIA_aux_cntl
COMMENT_LABEL $D00B VIA auxiliary control register
LABEL $D00C VIA_cntl
COMMENT_LABEL $D00C VIA control register
LABEL $D00D VIA_int_flags
COMMENT_LABEL $D00D VIA interrupt flags register
LABEL $D00E VIA_int_enable
COMMENT_LABEL $D00E VIA interrupt enable register
LABEL $D00F VIA_port_a_nohs
COMMENT_LABEL $D00F VIA port A data I/O register (no handshaking)
LABEL $F000 Cold_Start
LABEL $F06C Warm_Start
LABEL $F14C Init_VIA
LABEL $F164 Init_OS_RAM
LABEL $F18B Init_OS
LABEL $F192 Wait_Recal
LABEL $F1A2 Set_Refresh
LABEL $F1AA DP_to_D0
LABEL $F1AF DP_to_C8
LABEL $F1B4 Read_Btns_Mask
LABEL $F1BA Read_Btns
LABEL $F1F5 Joy_Analog
LABEL $F1F8 Joy_Digital
LABEL $F256 Sound_Byte
LABEL $F259 Sound_Byte_x
LABEL $F25B Sound_Byte_raw
LABEL $F272 Clear_Sound
LABEL $F27D Sound_Bytes
LABEL $F284 Sound_Bytes_x
LABEL $F289 Do_Sound
LABEL $F28C Do_Sound_x
LABEL $F29D Intensity_1F
LABEL $F2A1 Intensity_3F
LABEL $F2A5 Intensity_5F
LABEL $F2A9 Intensity_7F
LABEL $F2AB Intensity_a
LABEL $F2BE Dot_ix_b
LABEL $F2C1 Dot_ix
LABEL $F2C3 Dot_d
LABEL $F2C5 Dot_here
LABEL $F2D5 Dot_List
LABEL $F2DE Dot_List_Reset
LABEL $F2E6 Recalibrate
LABEL $F2F2 Moveto_x_7F
LABEL $F2FC Moveto_d_7F
LABEL $F308 Moveto_ix_FF
LABEL $F30C Moveto_ix_7F
LABEL $F30E Moveto_ix_a
LABEL $F310 Moveto_ix
LABEL $F312 Moveto_d
LABEL $F34A Reset0Ref_D0
LABEL $F34F Check0Ref
LABEL $F354 Reset0Ref
LABEL $F35B Reset_Pen
LABEL $F36B Reset0Int
LABEL $F373 Print_Str_hwyx
LABEL $F378 Print_Str_yx
LABEL $F37A Print_Str_d
LABEL $F385 Print_List_hw
LABEL $F38A Print_List
LABEL $F38C Print_List_chk
LABEL $F391 Print_Ships_x
LABEL $F393 Print_Ships
LABEL $F3AD Mov_Draw_VLc_a
COMMENT_LABEL $F3AD count y x y x ...
LABEL $F3B1 Mov_Draw_VL_b
COMMENT_LABEL $F3B1 y x y x ...
LABEL $F3B5 Mov_Draw_VLcs
COMMENT_LABEL $F3B5 count scale y x y x ...
LABEL $F3B7 Mov_Draw_VL_ab
COMMENT_LABEL $F3B7 y x y x ...
LABEL $F3B9 Mov_Draw_VL_a
COMMENT_LABEL $F3B9 y x y x ...
LABEL $F3BC Mov_Draw_VL
COMMENT_LABEL $F3BC y x y x ...
LABEL $F3BE Mov_Draw_VL_d
COMMENT_LABEL $F3BE y x y x ...
LABEL $F3CE Draw_VLc
COMMENT_LABEL $F3CE count y x y x ...
LABEL $F3D2 Draw_VL_b
COMMENT_LABEL $F3D2 y x y x ...
LABEL $F3D6 Draw_VLcs
COMMENT_LABEL $F3D6 count scale y x y x ...
LABEL $F3D8 Draw_VL_ab
COMMENT_LABEL $F3D8 y x y x ...
LABEL $F3DA Draw_VL_a
COMMENT_LABEL $F3DA y x y x ...
LABEL $F3DD Draw_VL
COMMENT_LABEL $F3DD y x y x ...
LABEL $F3DF Draw_Line_d
COMMENT_LABEL $F3DF y x y x ...
LABEL $F404 Draw_VLp_FF
COMMENT_LABEL $F404 pattern y x pattern y x ... $01
LABEL $F408 Draw_VLp_7F
COMMENT_LABEL $F408 pattern y x pattern y x ... $01
LABEL $F40C Draw_VLp_scale
COMMENT_LABEL $F40C scale pattern y x pattern y x ... $01
LABEL $F40E Draw_VLp_b
COMMENT_LABEL $F40E pattern y x pattern y x ... $01
LABEL $F410 Draw_VLp
COMMENT_LABEL $F410 pattern y x pattern y x ... $01
LABEL $F434 Draw_Pat_VL_a
COMMENT_LABEL $F434 y x y x ...
LABEL $F437 Draw_Pat_VL
COMMENT_LABEL $F437 y x y x ...
LABEL $F439 Draw_Pat_VL_d
COMMENT_LABEL $F439 y x y x ...
LABEL $F46E Draw_VL_mode
COMMENT_LABEL $F46E mode y x mode y x ... $01
LABEL $F495 Print_Str
LABEL $F511 Random_3
LABEL $F517 Random
LABEL $F533 Init_Music_Buf
LABEL $F53F Clear_x_b
LABEL $F542 Clear_C8_RAM
COMMENT_LABEL $F542 never used by GCE carts?
LABEL $F545 Clear_x_256
LABEL $F548 Clear_x_d
LABEL $F550 Clear_x_b_80
LABEL $F552 Clear_x_b_a
LABEL $F55A Dec_3_Counters
LABEL $F55E Dec_6_Counters
LABEL $F563 Dec_Counters
LABEL $F56D Delay_3
COMMENT_LABEL $F56D 30 cycles
LABEL $F571 Delay_2
COMMENT_LABEL $F571 25 cycles
LABEL $F575 Delay_1
COMMENT_LABEL $F575 20 cycles
LABEL $F579 Delay_0
COMMENT_LABEL $F579 12 cycles
LABEL $F57A Delay_b
COMMENT_LABEL $F57A 5*B + 10 cycles
LABEL $F57D Delay_RTS
COMMENT_LABEL $F57D 5 cycles
LABEL $F57E Bitmask_a
LABEL $F584 Abs_a_b
LABEL $F58B Abs_b
LABEL $F593 Rise_Run_Angle
LABEL $F5D9 Get_Rise_Idx
LABEL $F5DB Get_Run_Idx
LABEL $F5EF Get_Rise_Run
LABEL $F5FF Rise_Run_X
LABEL $F601 Rise_Run_Y
LABEL $F603 Rise_Run_Len
LABEL $F610 Rot_VL_ab
LABEL $F616 Rot_VL
LABEL $F61F Rot_VL_Mode_a
LABEL $F62B Rot_VL_Mode
LABEL $F637 Rot_VL_dft
LABEL $F65B Xform_Run_a
LABEL $F65D Xform_Run
LABEL $F661 Xform_Rise_a
LABEL $F663 Xform_Rise
LABEL $F67F Move_Mem_a_1
LABEL $F683 Move_Mem_a
LABEL $F687 Init_Music_chk
LABEL $F68D Init_Music
LABEL $F692 Init_Music_x
LABEL $F7A9 Select_Game
LABEL $F84F Clear_Score
LABEL $F85E Add_Score_a
LABEL $F87C Add_Score_d
LABEL $F8B7 Strip_Zeros
LABEL $F8C7 Compare_Score
LABEL $F8D8 New_High_Score
LABEL $F8E5 Obj_Will_Hit_u
LABEL $F8F3 Obj_Will_Hit
LABEL $F8FF Obj_Hit
LABEL $F92E Explosion_Snd
LABEL $FF9F Draw_Grid_VL
LABEL $FD0D music1
LABEL $FD1D music2
LABEL $FD81 music3
LABEL $FDD3 music4
LABEL $FE38 music5
LABEL $FE76 music6
LABEL $FEC6 music7
LABEL $FEF8 music8
LABEL $FF26 music9
LABEL $FF44 musica
LABEL $FF62 musicb
LABEL $FF7A musicc
LABEL $FF8F musicd
LABEL $F9F4 Char_Table
LABEL $FBD4 Char_Table_End
LABEL $0000 Full_Wall_nomode
LABEL $000D Half_Wall
LABEL $0016 ShipR_nomode
LABEL $0029 ShipL_nomode
LABEL $003C Shot
EQU $4C Ship_Marker
EQU $55 Arrow_R
EQU $65 Arrow_L
EQU $75 Bow_1
LABEL $0085 Bow_2
LABEL $0095 Dash
LABEL $00B1 Wedge_R
LABEL $00BE Wedge_L
LABEL $00CB Ghost
LABEL $00E4 Tank_R
LABEL $00E4 Tank_L
LABEL $00E4 Tank_doh
LABEL $0124 Prize_1
LABEL $0134 Prize_2
LABEL $0144 Cannonball
LABEL $0145 Explode_0
LABEL $0158 Explode_1
LABEL $016B Explode_2
LABEL $017E Explode_3
LABEL $0191 Explode_4
LABEL $01A4 Explode_5
LABEL $01B7 Explode_6
LABEL $01CA Explode_7
LABEL $01DD Explode_8
LABEL $01F0 Explode_9
LABEL $0203 Explode_10
LABEL $0216 bulletYpos_t
LABEL $021D bullete_t
LABEL $C892 bullet0e
LABEL $C893 bullet1e
LABEL $C894 bullet2e
LABEL $C895 bullet3e
LABEL $C896 bullet4e
LABEL $C897 bullet5e
LABEL $C898 bullet6e
LABEL $022B bulletd_t
LABEL $C899 bullet0d
LABEL $C89A bullet1d
LABEL $C89B bullet2d
LABEL $C89C bullet3d
LABEL $C89D bullet4d
LABEL $C89E bullet5d
LABEL $C89F bullet6d
LABEL $0239 bulletx_t
LABEL $C8A0 bullet0x
LABEL $C8A1 bullet1x
LABEL $C8A2 bullet2x
LABEL $C8A3 bullet3x
LABEL $C8A4 bullet4x
LABEL $C8A5 bullet5x
LABEL $C8A6 bullet6x
LABEL $0247 alleye_t
LABEL $C8A7 alley0e
LABEL $C8A8 alley1e
LABEL $C8A9 alley2e
LABEL $C8AA alley3e
LABEL $C8AB alley4e
LABEL $C8AC alley5e
LABEL $C8AD alley6e
LABEL $0255 alleyd_t
LABEL $C8AE alley0d
LABEL $C8AF alley1d
LABEL $C8B0 alley2d
LABEL $C8B1 alley3d
LABEL $C8B2 alley4d
LABEL $C8B3 alley5d
LABEL $C8B4 alley6d
LABEL $0263 alleyx_t
LABEL $C8B5 alley0x
LABEL $C8B6 alley1x
LABEL $C8B7 alley2x
LABEL $C8B8 alley3x
LABEL $C8B9 alley4x
LABEL $C8BA alley5x
LABEL $C8BB alley6x
LABEL $0271 enemy_speed_t
LABEL $0281 enemy_stuff_t
LABEL $0283 Arrow_D
LABEL $0299 Arrow_L_t
LABEL $029B Arrow_R_t
LABEL $0287 Bow_D
LABEL $029D Bow_t
LABEL $0289 Dash_D
LABEL $02A1 Dash_t
LABEL $028B Explode_D
LABEL $02A3 Explode_t
LABEL $028D Ghost_D
LABEL $02B7 Ghost_t
LABEL $028F Prize_D
LABEL $02BD Prize_t
LABEL $0291 Tank_D
LABEL $02B9 Tank_L_t
LABEL $02BB Tank_R_t
LABEL $0295 Wedge_D
LABEL $02C1 Wedge_L_t
LABEL $02C3 Wedge_R_t
LABEL $02C5 credits
LABEL $C880 score
LABEL $C887 highscore
LABEL $C88E shipdir
LABEL $C88F shippos
LABEL $C890 shipXpos
LABEL $C891 in_alley
LABEL $C8BC bullet_count
LABEL $C8BD ships_left
LABEL $C8BE bulletYtemp
LABEL $C8BF Ship_Dead
LABEL $C8C0 Arrow_f
LABEL $C8C1 Bow_f
LABEL $C8C2 Dash_f
LABEL $C8C3 Wedge_f
LABEL $C8C4 Ghost_f
LABEL $C8C5 Prize_f
LABEL $C8C6 Cannonball_f
LABEL $C8C7 Tank_f
LABEL $C8C8 Explode_f
LABEL $C8C9 frm100cnt
LABEL $C8CA frm50cnt
LABEL $C8CB frm25cnt
LABEL $C8CC frm20cnt
LABEL $C8CD frm10cnt
LABEL $C8CE frm5cnt
LABEL $C8CF frm2cnt
LABEL $C8D0 temp
LABEL $C8D1 rottemp
EQU $11 ALLEYWIDTH
EQU $00 LEFT
EQU $01 RIGHT
EQU $08 MOVEAMOUNT
COMMENT_LABEL $08 how many 'pixels per frame' TOD/FIX/something
LABEL $046F setup
COMMENT_LABEL $046F setting up hardware, resetting scores, once per boot
EQU $1D start
LABEL $0038 main
LABEL $005E jsdoneY
LABEL $0056 going_down
LABEL $006B leave_flag
LABEL $009B jsdoneX
LABEL $0086 going_left
EQU $72 going_right
LABEL $0082 setMaxRight
LABEL $0084 setRightDone
LABEL $0099 setMaxLeft
LABEL $009B setLeftDone
LABEL $00B9 MLF3183
LABEL $00E7 MLF3453
LABEL $00DC MLF33B3
LABEL $00DE MLF33D3
LABEL $00E2 MLF3413
LABEL $00EB moveto_d_done3
LABEL $00F0 Draw_VLa4
LABEL $010A LF3F44
LABEL $0137 MLF3186
LABEL $0165 MLF3456
LABEL $015A MLF33B6
LABEL $015C MLF33D6
LABEL $0160 MLF3416
LABEL $0169 moveto_d_done6
LABEL $016E Draw_VLa7
LABEL $0188 LF3F47
LABEL $01BF donuthin1
LABEL $01C8 MLF3189
LABEL $01F6 MLF3459
LABEL $01EB MLF33B9
LABEL $01ED MLF33D9
LABEL $01F1 MLF3419
LABEL $01FA moveto_d_done9
LABEL $0205 donuthin2
LABEL $0207 Draw_VLa10
LABEL $0221 LF3F410
LABEL $023B toad
LABEL $0277 no_press
LABEL $0277 already_exists
LABEL $0273 negstart
LABEL $0277 newshotdone
LABEL $04F9 move_bullets
LABEL $0553 draw_bullets
LABEL $02D1 MLF31815
LABEL $02FF MLF34515
LABEL $02F4 MLF33B15
LABEL $02F6 MLF33D15
LABEL $02FA MLF34115
LABEL $0303 moveto_d_done15
LABEL $0309 ships_left_loop
LABEL $030E Draw_VLa16
LABEL $0328 LF3F416
LABEL $035F MLF31818
LABEL $038D MLF34518
LABEL $0382 MLF33B18
LABEL $0384 MLF33D18
LABEL $0388 MLF34118
LABEL $0391 moveto_d_done18
LABEL $03A1 bowl
LABEL $03A8 dobowdraw
LABEL $03D0 MLF31820
LABEL $03FE MLF34520
LABEL $03F3 MLF33B20
LABEL $03F5 MLF33D20
LABEL $03F9 MLF34120
LABEL $0402 moveto_d_done20
LABEL $046C no100cntreset
LABEL $0428 no10cntreset
LABEL $0435 no20cntreset
LABEL $0442 no25cntreset
LABEL $0452 no50cntreset
LABEL $0502 move_start
LABEL $0546 next_bullet2
LABEL $0540 moving_left
LABEL $0524 destroy_bullet
LABEL $0552 bullets_done2
LABEL $055D bstart
LABEL $05DD next_bullet
LABEL $059F MLF31822
LABEL $05CD MLF34522
LABEL $05C2 MLF33B22
LABEL $05C4 MLF33D22
LABEL $05C8 MLF34122
LABEL $05D1 moveto_d_done22
LABEL $05D8 dwellcnt
LABEL $05EA bullets_done
LABEL $0604 *
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 DEFINE SECTION
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 load vectrex bios routine definitions
COMMENT $0000 vectrex function includes
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables      ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slighte changed by Malban                 ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ifndef INCLUDE_I
COMMENT_LINE $0000 INCLUDE_I equ 1
COMMENT_LINE $0000 $C839   ;Pointer to copyright string during startup
COMMENT_LINE $0000 $C83B   ;High score cold-start flag (=0 if valid)
COMMENT_LINE $0000 $C83C   ;temp byte
COMMENT_LINE $0000 $C843   ;        register 9
COMMENT_LINE $0000 $C844   ;        register 8
COMMENT_LINE $0000 $C848   ;        register 4
COMMENT_LINE $0000 $C849   ;        register 3
COMMENT_LINE $0000 $C84A   ;        register 2
COMMENT_LINE $0000 $C84C   ;        register 0
COMMENT_LINE $0000 $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT_LINE $0000 $C868...$C876   ;Unused?
COMMENT_LINE $0000 $C878   ;Unused?
COMMENT_LINE $0000 $C880 - $CBEA is user RAM  ;
COMMENT_LINE $0000 0 sample/hold (0=enable  mux 1=disable mux)
COMMENT_LINE $0000 1 mux sel 0
COMMENT_LINE $0000 2 mux sel 1
COMMENT_LINE $0000 3 sound BC1
COMMENT_LINE $0000 4 sound BDIR
COMMENT_LINE $0000 5 comparator input
COMMENT_LINE $0000 6 external device (slot pin 35) initialized to input
COMMENT_LINE $0000 7 /RAMP
COMMENT_LINE $0000 0 PA latch enable
COMMENT_LINE $0000 1 PB latch enable
COMMENT_LINE $0000 2 \                     110=output to CB2 under control of phase 2 clock
COMMENT_LINE $0000 3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT_LINE $0000 4 /
COMMENT_LINE $0000 5 0=t2 one shot                 1=t2 free running
COMMENT_LINE $0000 6 0=t1 one shot                 1=t1 free running
COMMENT_LINE $0000 7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT_LINE $0000 0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 1 \
COMMENT_LINE $0000 2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT_LINE $0000 3 /
COMMENT_LINE $0000 4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 5 \
COMMENT_LINE $0000 6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT_LINE $0000 7 /
COMMENT_LINE $0000 bit                             cleared by
COMMENT_LINE $0000 0 CA2 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 1 CA1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 2 shift register interrupt flag reading or writing shift register
COMMENT_LINE $0000 3 CB2 interrupt flag            reading or writing port B I/O
COMMENT_LINE $0000 4 CB1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT_LINE $0000 6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT_LINE $0000 7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT_LINE $0000 0 CA2 interrupt enable
COMMENT_LINE $0000 1 CA1 interrupt enable
COMMENT_LINE $0000 2 shift register interrupt enable
COMMENT_LINE $0000 3 CB2 interrupt enable
COMMENT_LINE $0000 4 CB1 interrupt enable
COMMENT_LINE $0000 5 timer 2 interrupt enable
COMMENT_LINE $0000 6 timer 1 interrupt enable
COMMENT_LINE $0000 7 IER set/clear control
COMMENT_LINE $0000 endif
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 DATA SECTION
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 lda #5 ; sta $C823 ; vector count
COMMENT $000D lda #3 ; sta $C823
COMMENT_LINE $0016 SHIP
COMMENT $0016 fcb 0, +8, -12
COMMENT $0029 fcb 0, +8, +12
COMMENT_LINE $004C number of guys left
COMMENT_LINE $0055 Enemy list
COMMENT $00CE TOP
COMMENT $00D7 GAP
COMMENT $00DA Bottom
COMMENT $00E4 sync and move to y, x
COMMENT $00E7 draw, y, x
COMMENT $00EA draw, y, x
COMMENT $00ED draw, y, x
COMMENT $00F0 draw, y, x
COMMENT $00F3 draw, y, x
COMMENT $00F6 draw, y, x
COMMENT $00F9 draw, y, x
COMMENT $00FC draw, y, x
COMMENT $00FF draw, y, x
COMMENT $0102 draw, y, x
COMMENT_LINE $0105 fcb 0, -8, +11 ; sync and move to y, x
COMMENT $0105 draw, y, x
COMMENT $0108 draw, y, x
COMMENT $010B draw, y, x
COMMENT $010E draw, y, x
COMMENT $0111 draw, y, x
COMMENT $0114 draw, y, x
COMMENT $0117 draw, y, x
COMMENT $011A draw, y, x
COMMENT $011D draw, y, x
COMMENT $0120 draw, y, x
COMMENT $0123 endmarker
COMMENT_LINE $0216 TABLES
COMMENT_LINE $0216 shippos_t:          fcb      -3*ALLEYWIDTH,-2*ALLEYWIDTH,-1*ALLEYWIDTH,0,1*ALLEYWIDTH,2*ALLEYWIDTH,3*ALLEYWIDTH ; Y pos of ship
COMMENT $0216 Y pos of bullet/ship/enemy per alley
COMMENT $021D exists TRUE/FALSE
COMMENT $022B direction left/right
COMMENT $0239 X position
COMMENT_LINE $0271 enemy_t:            fdb      Arrow_t, Bow_t, Dash, Wedge_t, Ghost_t, Prize_t ;, CannonBall ;, Tank
COMMENT $0271 example TODO
COMMENT_LINE $0283 Enemy direction table, single entry means same graphics both ways
COMMENT_LINE $0299 Animation tables counts must be mod 100 == 0 ie 1,2,4,5,10,20,25,50,100
COMMENT $029D flippy 90 degree animation (2 frames)
COMMENT $02A1 same, no animation (100 frames)
COMMENT $02B7 same, no animation (100 frames)
COMMENT $02BD big/small animation (10 frames)
COMMENT_LINE $02E3 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $02E3 vim: ts=4
COMMENT_LINE $02E3 vim: syntax=asm6809
COMMENT_LINE $02E3 MACROS
COMMENT_LINE $0000 adding bullet to alley if no other bullet is already there
COMMENT $0000 set EXIST
COMMENT_LINE $0000 left(0) or right(1)?
COMMENT $0000 set DIRECTION
COMMENT_LINE $0000 starting x coordinates
COMMENT $0000 set start X
COMMENT $0000 set start -X
COMMENT $0000 rts
COMMENT $0000 mask off low 4 bits to limit answer 0-7
COMMENT $0000 mask some other random bit to derive start direction
COMMENT_LINE $0000 need code to generate new random monster OR prize ?? in random alley
COMMENT_LINE $0000 monster type, and direction, direction decidesd initial X placement
COMMENT_LINE $0000 store answer in (bool)alleyNe (always 1), (bool)alleyNd (0 left, 1 right), (signed int)alleyNx (-127 or 127 )
COMMENT $0000 /BLANK low and /ZERO low
COMMENT $0000 clear shift register
COMMENT $0000 clear D/A register
COMMENT $0000 mux=1, disable mux
COMMENT $0000 mux=1, enable mux
COMMENT $0000 do it again
COMMENT $0000 disable mu
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Enable mux
COMMENT $0000 Save D-register on stack
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Clear shift regigster
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 timer 1 count high
COMMENT $0000 Get back D-reg
COMMENT $0000 Wait for timer 1
COMMENT $0000 Delay a moment
COMMENT $0000 Wait for timer 1
COMMENT $0000 Store intensity in D/A
COMMENT $0000 Save intensity in $C827
COMMENT $0000 mux disabled channel 2
COMMENT $0000 mux enabled channel 2
COMMENT $0000 do it again just because
COMMENT $0000 turn off mux
COMMENT $0000 inside an alley
COMMENT $0000 disable Y position poll
COMMENT $0000 no Y motion
COMMENT $0000 slot 6 as far up as u can go
COMMENT_LINE $0000 now test X first test should be if there is a prize in this alley.
COMMENT $0000 is X basically in the middle alley? unset in_alley flag
COMMENT $0000 if b-3 > 0 then clr in_alley
COMMENT $0000 clear in alley flag when in middle
COMMENT_LINE $0000 adda     shipXpos
COMMENT_LINE $0000 sta      shipXpos
COMMENT_LINE $0000 sta      shipXpos
COMMENT $0000 Send Y to A/D
COMMENT $0000 Enable mux
COMMENT $0000 Point to next coordinate pair
COMMENT $0000 Wait a moment
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Shift reg=$FF (solid line), T1H=0
COMMENT $0000 Put pattern in shift register
COMMENT $0000 Set T1H (scale factor?)
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out
COMMENT $0000 Wait a moment more
COMMENT $0000 Clear shift register (blank output)
COMMENT $0000 Decrement line count
COMMENT $0000 Go back for more points
COMMENT_LINE $0000 jmp Check0Ref ;Reset zero reference if necessary
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 Variable / RAM SECTION
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 insert your variables (RAM usage) in the BSS section
COMMENT_LINE $0000 user RAM starts at $c880
COMMENT $0000 start of our ram space
COMMENT $C880 7 bytes
COMMENT $C887 7 bytes
COMMENT $C893 shit Exists in alley
COMMENT $C89A travel direction
COMMENT $C8A1 location on X axis
COMMENT $C8A7 is there a monster in the alley? (Exists?)
COMMENT $C8AE which way is the monster moving?
COMMENT $C8B5 where monster is on x axis
COMMENT $C8BC 1 byte
COMMENT $C8BD 1 byte
COMMENT_LINE $C8C0 variables to hold which frame for each shape enemy some might not have an animation...
COMMENT $C8C8 generic shape used when something is destroyed
COMMENT_LINE $C8C9 frame counts for animations
COMMENT $C8D0 generic 1 byte temp
COMMENT $C8D1 rotation list temp
COMMENT_LINE $C8E0 CONSTANTS place after VARIABLES
COMMENT_LINE $C8E0 FALSE              =     0
COMMENT_LINE $C8E0 TRUE               =      1
COMMENT_LINE $C8E0 ***************************************************************************
COMMENT_LINE $C8E0 HEADER SECTION
COMMENT_LINE $C8E0 ***************************************************************************
COMMENT_LINE $C8E0 The cartridge ROM starts at address 0
COMMENT_LINE $0000 the first few bytes are mandatory, otherwise the BIOS will not load
COMMENT_LINE $0000 the ROM file, and will start MineStorm instead
COMMENT $0000 'g' is copyright sign
COMMENT $000B music from the rom
COMMENT $000D hight, width, rel y, rel x (from 0,0)
COMMENT $0011 some game information, ending with $80
COMMENT $0019 end of game header
COMMENT_LINE $001A ***************************************************************************
COMMENT_LINE $001A CODE SECTION
COMMENT_LINE $001A ***************************************************************************
COMMENT_LINE $001A here the cartridge program starts off
FORCE_SYMBOL $001A setup
FORCE_NO_SYMBOL $001D
FORCE_SYMBOL $001F shippos
FORCE_SYMBOL $0022 shipXpos
FORCE_SYMBOL $0025 in_alley
FORCE_SYMBOL $0028 LEFT
FORCE_SYMBOL $002A shipdir
FORCE_SYMBOL $002D score
FORCE_SYMBOL $0030 Clear_Score
FORCE_NO_SYMBOL $0033
FORCE_SYMBOL $0035 ships_left
FORCE_SYMBOL $0038 Wait_Recal
FORCE_SYMBOL $003B Joy_Digital
COMMENT $003E inside an alley
FORCE_SYMBOL $003E in_alley
COMMENT $0041 disable Y position poll
FORCE_SYMBOL $0043 Vec_Joy_1_Y
COMMENT $0046 no Y motion
FORCE_SYMBOL $004A shippos
COMMENT $004D slot 6 as far up as u can go
FORCE_NO_SYMBOL $004D
FORCE_SYMBOL $0051 shippos
FORCE_SYMBOL $0056 shippos
FORCE_SYMBOL $005B shippos
COMMENT_LINE $005E now test X first test should be if there is a prize in this alley.
COMMENT $005E is X basically in the middle alley? unset in_alley flag
FORCE_SYMBOL $005E shipXpos
FORCE_SYMBOL $0061 Abs_b
FORCE_NO_SYMBOL $0064
COMMENT $0066 if b-3 > 0 then clr in_alley
COMMENT $0068 clear in alley flag when in middle
FORCE_SYMBOL $0068 in_alley
FORCE_SYMBOL $006B Vec_Joy_1_X
FORCE_NO_SYMBOL $0072
FORCE_SYMBOL $0074 in_alley
FORCE_SYMBOL $0077 RIGHT
FORCE_SYMBOL $0079 shipdir
FORCE_NO_SYMBOL $007C
COMMENT_LINE $007E adda     shipXpos
FORCE_NO_SYMBOL $0082
COMMENT_LINE $0084 sta      shipXpos
FORCE_NO_SYMBOL $0086
FORCE_SYMBOL $0088 in_alley
FORCE_SYMBOL $008B LEFT
FORCE_SYMBOL $008D shipdir
FORCE_SYMBOL $0090 shipXpos
FORCE_NO_SYMBOL $0093
COMMENT_LINE $009B sta      shipXpos
FORCE_NO_SYMBOL $009B
COMMENT $009D Store intensity in D/A
FORCE_SYMBOL $009D VIA_port_a
COMMENT $009F Save intensity in $C827
FORCE_SYMBOL $009F Vec_Brightness
COMMENT $00A2 mux disabled channel 2
FORCE_NO_SYMBOL $00A2
FORCE_SYMBOL $00A5 VIA_port_b
COMMENT $00A7 mux enabled channel 2
FORCE_SYMBOL $00A7 VIA_port_b
COMMENT $00A9 do it again just because
FORCE_SYMBOL $00A9 VIA_port_b
FORCE_NO_SYMBOL $00AB
COMMENT $00AD turn off mux
FORCE_SYMBOL $00AD VIA_port_b
COMMENT_LINE $00AF jmp no_walls ; skip printing walls to save cycles
COMMENT_LINE $00AF bottom wall
COMMENT_LINE $00AF lda #5
COMMENT_LINE $00AF sta $C823 ; vector count
COMMENT $00B3 Store Y in D/A register
FORCE_SYMBOL $00B3 VIA_port_a
COMMENT $00B5 Enable mux
FORCE_SYMBOL $00B5 VIA_port_b
COMMENT $00B7 Save D-register on stack
COMMENT $00B9 Blank low, zero high?
FORCE_NO_SYMBOL $00B9
FORCE_SYMBOL $00BB VIA_cntl
COMMENT $00BD Clear shift regigster
FORCE_SYMBOL $00BD VIA_shift_reg
COMMENT $00BF Disable mux
FORCE_SYMBOL $00BF VIA_port_b
COMMENT $00C1 Store X in D/A register
FORCE_SYMBOL $00C1 VIA_port_a
COMMENT $00C3 timer 1 count high
FORCE_SYMBOL $00C3 VIA_t1_cnt_hi
COMMENT $00C5 Get back D-reg
FORCE_SYMBOL $00C7 Abs_a_b
FORCE_NO_SYMBOL $00CE
FORCE_NO_SYMBOL $00D0
FORCE_NO_SYMBOL $00D4
FORCE_NO_SYMBOL $00D8
COMMENT $00DC Wait for timer 1
FORCE_NO_SYMBOL $00DC
FORCE_SYMBOL $00DE VIA_int_flags
COMMENT $00E2 Delay a moment
COMMENT $00E7 Wait for timer 1
FORCE_SYMBOL $00E7 VIA_int_flags
FORCE_SYMBOL $00EB Full_Wall_nomode
COMMENT $00EE jsr Draw_VLc
FORCE_NO_SYMBOL $00F0
FORCE_NO_SYMBOL $00F3
COMMENT $00F5 Send Y to A/D
FORCE_SYMBOL $00F5 VIA_port_a
COMMENT $00F7 Enable mux
FORCE_SYMBOL $00F7 VIA_port_b
COMMENT $00F9 Point to next coordinate pair
FORCE_NO_SYMBOL $00F9
COMMENT $00FB Wait a moment
COMMENT $00FC Disable mux
FORCE_SYMBOL $00FC VIA_port_b
COMMENT $00FE Send X to A/D
FORCE_SYMBOL $00FE VIA_port_a
COMMENT $0100 Shift reg=$FF (solid line), T1H=0
FORCE_NO_SYMBOL $0100
COMMENT $0103 Put pattern in shift register
FORCE_SYMBOL $0103 VIA_shift_reg
COMMENT $0105 Set T1H (scale factor?)
FORCE_SYMBOL $0105 VIA_t1_cnt_hi
COMMENT $0107 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $0107
COMMENT $010A Wait for T1 to time out
FORCE_SYMBOL $010A VIA_int_flags
COMMENT $010E Wait a moment more
COMMENT $010F Clear shift register (blank output)
FORCE_SYMBOL $010F VIA_shift_reg
COMMENT $0111 Decrement line count
FORCE_NO_SYMBOL $0111
COMMENT $0115 Go back for more points
COMMENT_LINE $0117 jmp Check0Ref ;Reset zero reference if necessary
COMMENT_LINE $0117 jmp      no_walls
COMMENT_LINE $0117 no_walls:
COMMENT_LINE $0117 top wall
FORCE_NO_SYMBOL $0117
COMMENT $011A /BLANK low and /ZERO low
FORCE_SYMBOL $011A VIA_cntl
COMMENT $011C clear shift register
FORCE_SYMBOL $011C VIA_shift_reg
FORCE_NO_SYMBOL $011E
COMMENT $0121 clear D/A register
FORCE_SYMBOL $0121 VIA_port_a
COMMENT $0123 mux=1, disable mux
FORCE_SYMBOL $0123 VIA_port_b
COMMENT $0125 mux=1, enable mux
FORCE_SYMBOL $0125 VIA_port_b
COMMENT $0127 do it again
FORCE_SYMBOL $0127 VIA_port_b
FORCE_NO_SYMBOL $0129
COMMENT $012B disable mu
FORCE_SYMBOL $012B VIA_port_b
FORCE_NO_SYMBOL $012D
COMMENT $0131 Store Y in D/A register
FORCE_SYMBOL $0131 VIA_port_a
COMMENT $0133 Enable mux
FORCE_SYMBOL $0133 VIA_port_b
COMMENT $0135 Save D-register on stack
COMMENT $0137 Blank low, zero high?
FORCE_NO_SYMBOL $0137
FORCE_SYMBOL $0139 VIA_cntl
COMMENT $013B Clear shift regigster
FORCE_SYMBOL $013B VIA_shift_reg
COMMENT $013D Disable mux
FORCE_SYMBOL $013D VIA_port_b
COMMENT $013F Store X in D/A register
FORCE_SYMBOL $013F VIA_port_a
COMMENT $0141 timer 1 count high
FORCE_SYMBOL $0141 VIA_t1_cnt_hi
COMMENT $0143 Get back D-reg
FORCE_SYMBOL $0145 Abs_a_b
FORCE_NO_SYMBOL $014C
FORCE_NO_SYMBOL $014E
FORCE_NO_SYMBOL $0152
FORCE_NO_SYMBOL $0156
COMMENT $015A Wait for timer 1
FORCE_NO_SYMBOL $015A
FORCE_SYMBOL $015C VIA_int_flags
COMMENT $0160 Delay a moment
COMMENT $0165 Wait for timer 1
FORCE_SYMBOL $0165 VIA_int_flags
FORCE_SYMBOL $0169 Full_Wall_nomode
COMMENT $016C jsr Draw_VLc
FORCE_NO_SYMBOL $016E
FORCE_NO_SYMBOL $0171
COMMENT $0173 Send Y to A/D
FORCE_SYMBOL $0173 VIA_port_a
COMMENT $0175 Enable mux
FORCE_SYMBOL $0175 VIA_port_b
COMMENT $0177 Point to next coordinate pair
FORCE_NO_SYMBOL $0177
COMMENT $0179 Wait a moment
COMMENT $017A Disable mux
FORCE_SYMBOL $017A VIA_port_b
COMMENT $017C Send X to A/D
FORCE_SYMBOL $017C VIA_port_a
COMMENT $017E Shift reg=$FF (solid line), T1H=0
FORCE_NO_SYMBOL $017E
COMMENT $0181 Put pattern in shift register
FORCE_SYMBOL $0181 VIA_shift_reg
COMMENT $0183 Set T1H (scale factor?)
FORCE_SYMBOL $0183 VIA_t1_cnt_hi
COMMENT $0185 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $0185
COMMENT $0188 Wait for T1 to time out
FORCE_SYMBOL $0188 VIA_int_flags
COMMENT $018C Wait a moment more
COMMENT $018D Clear shift register (blank output)
FORCE_SYMBOL $018D VIA_shift_reg
COMMENT $018F Decrement line count
FORCE_NO_SYMBOL $018F
COMMENT $0193 Go back for more points
COMMENT_LINE $0195 jmp Check0Ref ;Reset zero reference if necessary
COMMENT_LINE $0195 draw ship
FORCE_NO_SYMBOL $0195
COMMENT $0198 /BLANK low and /ZERO low
FORCE_SYMBOL $0198 VIA_cntl
COMMENT $019A clear shift register
FORCE_SYMBOL $019A VIA_shift_reg
FORCE_NO_SYMBOL $019C
COMMENT $019F clear D/A register
FORCE_SYMBOL $019F VIA_port_a
COMMENT $01A1 mux=1, disable mux
FORCE_SYMBOL $01A1 VIA_port_b
COMMENT $01A3 mux=1, enable mux
FORCE_SYMBOL $01A3 VIA_port_b
COMMENT $01A5 do it again
FORCE_SYMBOL $01A5 VIA_port_b
FORCE_NO_SYMBOL $01A7
COMMENT $01A9 disable mu
FORCE_SYMBOL $01A9 VIA_port_b
FORCE_NO_SYMBOL $01AB
COMMENT $01AD controls "scale"
FORCE_SYMBOL $01AD VIA_t1_cnt_lo
FORCE_SYMBOL $01B0 shippos
COMMENT_LINE $01B3 ldx #shippos_t
FORCE_SYMBOL $01B3 bulletYpos_t
COMMENT $01B6 get pos from shippos_t table
COMMENT $01B8 small offset
COMMENT_LINE $01BA ldb #0 ; pointing LEFT stay as-is
COMMENT $01BA testing for 0|LEFT 1|RIGHT
FORCE_SYMBOL $01BA shipdir
COMMENT_LINE $01BF ldb shipXpos ;#-17 ; pointing RIGHT move to the left to center
FORCE_SYMBOL $01BF shipXpos
COMMENT $01C2 Store Y in D/A register
FORCE_SYMBOL $01C2 VIA_port_a
COMMENT $01C4 Enable mux
FORCE_SYMBOL $01C4 VIA_port_b
COMMENT $01C6 Save D-register on stack
COMMENT $01C8 Blank low, zero high?
FORCE_NO_SYMBOL $01C8
FORCE_SYMBOL $01CA VIA_cntl
COMMENT $01CC Clear shift regigster
FORCE_SYMBOL $01CC VIA_shift_reg
COMMENT $01CE Disable mux
FORCE_SYMBOL $01CE VIA_port_b
COMMENT $01D0 Store X in D/A register
FORCE_SYMBOL $01D0 VIA_port_a
COMMENT $01D2 timer 1 count high
FORCE_SYMBOL $01D2 VIA_t1_cnt_hi
COMMENT $01D4 Get back D-reg
FORCE_SYMBOL $01D6 Abs_a_b
FORCE_NO_SYMBOL $01DD
FORCE_NO_SYMBOL $01DF
FORCE_NO_SYMBOL $01E3
FORCE_NO_SYMBOL $01E7
COMMENT $01EB Wait for timer 1
FORCE_NO_SYMBOL $01EB
FORCE_SYMBOL $01ED VIA_int_flags
COMMENT $01F1 Delay a moment
COMMENT $01F6 Wait for timer 1
FORCE_SYMBOL $01F6 VIA_int_flags
FORCE_SYMBOL $01FA ShipL_nomode
COMMENT $01FD testing for 0|LEFT 1|RIGHT
FORCE_SYMBOL $01FD shipdir
FORCE_SYMBOL $0202 ShipR_nomode
COMMENT $0205 jsr Draw_VLc ;_mode
FORCE_NO_SYMBOL $0207
FORCE_NO_SYMBOL $020A
COMMENT $020C Send Y to A/D
FORCE_SYMBOL $020C VIA_port_a
COMMENT $020E Enable mux
FORCE_SYMBOL $020E VIA_port_b
COMMENT $0210 Point to next coordinate pair
FORCE_NO_SYMBOL $0210
COMMENT $0212 Wait a moment
COMMENT $0213 Disable mux
FORCE_SYMBOL $0213 VIA_port_b
COMMENT $0215 Send X to A/D
FORCE_SYMBOL $0215 VIA_port_a
COMMENT $0217 Shift reg=$FF (solid line), T1H=0
FORCE_NO_SYMBOL $0217
COMMENT $021A Put pattern in shift register
FORCE_SYMBOL $021A VIA_shift_reg
COMMENT $021C Set T1H (scale factor?)
FORCE_SYMBOL $021C VIA_t1_cnt_hi
COMMENT $021E B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $021E
COMMENT $0221 Wait for T1 to time out
FORCE_SYMBOL $0221 VIA_int_flags
COMMENT $0225 Wait a moment more
COMMENT $0226 Clear shift register (blank output)
FORCE_SYMBOL $0226 VIA_shift_reg
COMMENT $0228 Decrement line count
FORCE_NO_SYMBOL $0228
COMMENT $022C Go back for more points
COMMENT_LINE $022E jmp Check0Ref ;Reset zero reference if necessary
COMMENT_LINE $022E place bullets
FORCE_SYMBOL $022E Read_Btns
FORCE_SYMBOL $0231 Vec_Button_1_2
FORCE_NO_SYMBOL $0236
FORCE_SYMBOL $0238 Ship_Dead
FORCE_SYMBOL $023B Vec_Btn_State
COMMENT_LINE $0240 adding bullet to alley if no other bullet is already there
FORCE_SYMBOL $0240 shippos
FORCE_SYMBOL $0244 bullete_t
FORCE_NO_SYMBOL $0249
FORCE_NO_SYMBOL $024D
COMMENT $024F set EXIST
FORCE_NO_SYMBOL $024F
COMMENT_LINE $0251 left(0) or right(1)?
FORCE_SYMBOL $0251 shippos
FORCE_SYMBOL $0255 bulletd_t
FORCE_SYMBOL $0258 shipdir
COMMENT $025D set DIRECTION
FORCE_NO_SYMBOL $025D
COMMENT_LINE $025F starting x coordinates
FORCE_SYMBOL $025F shippos
FORCE_SYMBOL $0263 bulletx_t
FORCE_SYMBOL $0268 shipdir
FORCE_NO_SYMBOL $026D
COMMENT $026F set start X
FORCE_NO_SYMBOL $026F
COMMENT $0275 set start -X
FORCE_NO_SYMBOL $0275
FORCE_SYMBOL $0277 move_bullets
FORCE_NO_SYMBOL $027A
COMMENT $027C Store intensity in D/A
FORCE_SYMBOL $027C VIA_port_a
COMMENT $027E Save intensity in $C827
FORCE_SYMBOL $027E Vec_Brightness
COMMENT $0281 mux disabled channel 2
FORCE_NO_SYMBOL $0281
FORCE_SYMBOL $0284 VIA_port_b
COMMENT $0286 mux enabled channel 2
FORCE_SYMBOL $0286 VIA_port_b
COMMENT $0288 do it again just because
FORCE_SYMBOL $0288 VIA_port_b
FORCE_NO_SYMBOL $028A
COMMENT $028C turn off mux
FORCE_SYMBOL $028C VIA_port_b
FORCE_SYMBOL $028E draw_bullets
FORCE_NO_SYMBOL $0291
COMMENT $0293 Store intensity in D/A
FORCE_SYMBOL $0293 VIA_port_a
COMMENT $0295 Save intensity in $C827
FORCE_SYMBOL $0295 Vec_Brightness
COMMENT $0298 mux disabled channel 2
FORCE_NO_SYMBOL $0298
FORCE_SYMBOL $029B VIA_port_b
COMMENT $029D mux enabled channel 2
FORCE_SYMBOL $029D VIA_port_b
COMMENT $029F do it again just because
FORCE_SYMBOL $029F VIA_port_b
FORCE_NO_SYMBOL $02A1
COMMENT $02A3 turn off mux
FORCE_SYMBOL $02A3 VIA_port_b
COMMENT_LINE $02A5 jmp main ; don't print scores
COMMENT_LINE $02A5 display score and ships left
FORCE_NO_SYMBOL $02A5
COMMENT $02A8 /BLANK low and /ZERO low
FORCE_SYMBOL $02A8 VIA_cntl
COMMENT $02AA clear shift register
FORCE_SYMBOL $02AA VIA_shift_reg
FORCE_NO_SYMBOL $02AC
COMMENT $02AF clear D/A register
FORCE_SYMBOL $02AF VIA_port_a
COMMENT $02B1 mux=1, disable mux
FORCE_SYMBOL $02B1 VIA_port_b
COMMENT $02B3 mux=1, enable mux
FORCE_SYMBOL $02B3 VIA_port_b
COMMENT $02B5 do it again
FORCE_SYMBOL $02B5 VIA_port_b
FORCE_NO_SYMBOL $02B7
COMMENT $02B9 disable mu
FORCE_SYMBOL $02B9 VIA_port_b
FORCE_SYMBOL $02BB score
FORCE_NO_SYMBOL $02C0
FORCE_SYMBOL $02C2 Print_Str_d
FORCE_NO_SYMBOL $02C8
COMMENT $02CB Store Y in D/A register
FORCE_SYMBOL $02CB VIA_port_a
COMMENT $02CD Enable mux
FORCE_SYMBOL $02CD VIA_port_b
COMMENT $02CF Save D-register on stack
COMMENT $02D1 Blank low, zero high?
FORCE_NO_SYMBOL $02D1
FORCE_SYMBOL $02D3 VIA_cntl
COMMENT $02D5 Clear shift regigster
FORCE_SYMBOL $02D5 VIA_shift_reg
COMMENT $02D7 Disable mux
FORCE_SYMBOL $02D7 VIA_port_b
COMMENT $02D9 Store X in D/A register
FORCE_SYMBOL $02D9 VIA_port_a
COMMENT $02DB timer 1 count high
FORCE_SYMBOL $02DB VIA_t1_cnt_hi
COMMENT $02DD Get back D-reg
FORCE_SYMBOL $02DF Abs_a_b
FORCE_NO_SYMBOL $02E6
FORCE_NO_SYMBOL $02E8
FORCE_NO_SYMBOL $02EC
FORCE_NO_SYMBOL $02F0
COMMENT $02F4 Wait for timer 1
FORCE_NO_SYMBOL $02F4
FORCE_SYMBOL $02F6 VIA_int_flags
COMMENT $02FA Delay a moment
COMMENT $02FF Wait for timer 1
FORCE_SYMBOL $02FF VIA_int_flags
COMMENT $0303 vector draw ships remaining routine TEST
FORCE_SYMBOL $0303 ships_left
FORCE_SYMBOL $0306 temp
FORCE_SYMBOL $0309 Ship_Marker
FORCE_NO_SYMBOL $030E
FORCE_NO_SYMBOL $0311
COMMENT $0313 Send Y to A/D
FORCE_SYMBOL $0313 VIA_port_a
COMMENT $0315 Enable mux
FORCE_SYMBOL $0315 VIA_port_b
COMMENT $0317 Point to next coordinate pair
FORCE_NO_SYMBOL $0317
COMMENT $0319 Wait a moment
COMMENT $031A Disable mux
FORCE_SYMBOL $031A VIA_port_b
COMMENT $031C Send X to A/D
FORCE_SYMBOL $031C VIA_port_a
COMMENT $031E Shift reg=$FF (solid line), T1H=0
FORCE_NO_SYMBOL $031E
COMMENT $0321 Put pattern in shift register
FORCE_SYMBOL $0321 VIA_shift_reg
COMMENT $0323 Set T1H (scale factor?)
FORCE_SYMBOL $0323 VIA_t1_cnt_hi
COMMENT $0325 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $0325
COMMENT $0328 Wait for T1 to time out
FORCE_SYMBOL $0328 VIA_int_flags
COMMENT $032C Wait a moment more
COMMENT $032D Clear shift register (blank output)
FORCE_SYMBOL $032D VIA_shift_reg
COMMENT $032F Decrement line count
FORCE_NO_SYMBOL $032F
COMMENT $0333 Go back for more points
COMMENT_LINE $0335 jmp Check0Ref ;Reset zero reference if necessary
FORCE_SYMBOL $0335 temp
COMMENT_LINE $033A end score+ship count
COMMENT_LINE $033A ;;; DRAW VARIOUS STUFF TEST ZONE
FORCE_NO_SYMBOL $033A
COMMENT $033D /BLANK low and /ZERO low
FORCE_SYMBOL $033D VIA_cntl
COMMENT $033F clear shift register
FORCE_SYMBOL $033F VIA_shift_reg
FORCE_NO_SYMBOL $0341
COMMENT $0344 clear D/A register
FORCE_SYMBOL $0344 VIA_port_a
COMMENT $0346 mux=1, disable mux
FORCE_SYMBOL $0346 VIA_port_b
COMMENT $0348 mux=1, enable mux
FORCE_SYMBOL $0348 VIA_port_b
COMMENT $034A do it again
FORCE_SYMBOL $034A VIA_port_b
FORCE_NO_SYMBOL $034C
COMMENT $034E disable mu
FORCE_SYMBOL $034E VIA_port_b
FORCE_SYMBOL $0350 bulletYpos_t
FORCE_NO_SYMBOL $0353
COMMENT $0355 Y
COMMENT $0357 X
COMMENT $0359 Store Y in D/A register
FORCE_SYMBOL $0359 VIA_port_a
COMMENT $035B Enable mux
FORCE_SYMBOL $035B VIA_port_b
COMMENT $035D Save D-register on stack
COMMENT $035F Blank low, zero high?
FORCE_NO_SYMBOL $035F
FORCE_SYMBOL $0361 VIA_cntl
COMMENT $0363 Clear shift regigster
FORCE_SYMBOL $0363 VIA_shift_reg
COMMENT $0365 Disable mux
FORCE_SYMBOL $0365 VIA_port_b
COMMENT $0367 Store X in D/A register
FORCE_SYMBOL $0367 VIA_port_a
COMMENT $0369 timer 1 count high
FORCE_SYMBOL $0369 VIA_t1_cnt_hi
COMMENT $036B Get back D-reg
FORCE_SYMBOL $036D Abs_a_b
FORCE_NO_SYMBOL $0374
FORCE_NO_SYMBOL $0376
FORCE_NO_SYMBOL $037A
FORCE_NO_SYMBOL $037E
COMMENT $0382 Wait for timer 1
FORCE_NO_SYMBOL $0382
FORCE_SYMBOL $0384 VIA_int_flags
COMMENT $0388 Delay a moment
COMMENT $038D Wait for timer 1
FORCE_SYMBOL $038D VIA_int_flags
FORCE_SYMBOL $0391 frm100cnt
FORCE_NO_SYMBOL $0394
FORCE_SYMBOL $0398 Prize_t
FORCE_NO_SYMBOL $039B
COMMENT_LINE $039F ldx #Prize_1 ; animation Primitive, switch every 100 frames
FORCE_SYMBOL $03A1 Prize_t
FORCE_NO_SYMBOL $03A4
FORCE_SYMBOL $03A8 Draw_VL_mode
FORCE_NO_SYMBOL $03AB
COMMENT $03AE /BLANK low and /ZERO low
FORCE_SYMBOL $03AE VIA_cntl
COMMENT $03B0 clear shift register
FORCE_SYMBOL $03B0 VIA_shift_reg
FORCE_NO_SYMBOL $03B2
COMMENT $03B5 clear D/A register
FORCE_SYMBOL $03B5 VIA_port_a
COMMENT $03B7 mux=1, disable mux
FORCE_SYMBOL $03B7 VIA_port_b
COMMENT $03B9 mux=1, enable mux
FORCE_SYMBOL $03B9 VIA_port_b
COMMENT $03BB do it again
FORCE_SYMBOL $03BB VIA_port_b
FORCE_NO_SYMBOL $03BD
COMMENT $03BF disable mu
FORCE_SYMBOL $03BF VIA_port_b
FORCE_SYMBOL $03C1 bulletYpos_t
FORCE_NO_SYMBOL $03C4
COMMENT $03C6 Y
COMMENT_LINE $03C8 clra
COMMENT_LINE $03C8 clrb ; X
COMMENT $03CA Store Y in D/A register
FORCE_SYMBOL $03CA VIA_port_a
COMMENT $03CC Enable mux
FORCE_SYMBOL $03CC VIA_port_b
COMMENT $03CE Save D-register on stack
COMMENT $03D0 Blank low, zero high?
FORCE_NO_SYMBOL $03D0
FORCE_SYMBOL $03D2 VIA_cntl
COMMENT $03D4 Clear shift regigster
FORCE_SYMBOL $03D4 VIA_shift_reg
COMMENT $03D6 Disable mux
FORCE_SYMBOL $03D6 VIA_port_b
COMMENT $03D8 Store X in D/A register
FORCE_SYMBOL $03D8 VIA_port_a
COMMENT $03DA timer 1 count high
FORCE_SYMBOL $03DA VIA_t1_cnt_hi
COMMENT $03DC Get back D-reg
FORCE_SYMBOL $03DE Abs_a_b
FORCE_NO_SYMBOL $03E5
FORCE_NO_SYMBOL $03E7
FORCE_NO_SYMBOL $03EB
FORCE_NO_SYMBOL $03EF
COMMENT $03F3 Wait for timer 1
FORCE_NO_SYMBOL $03F3
FORCE_SYMBOL $03F5 VIA_int_flags
COMMENT $03F9 Delay a moment
COMMENT $03FE Wait for timer 1
FORCE_SYMBOL $03FE VIA_int_flags
FORCE_SYMBOL $0402 Wedge_R
COMMENT_LINE $0405 lda #90
COMMENT_LINE $0405 ldu #rottemp
COMMENT_LINE $0405 jsr Rot_VL_Mode
COMMENT_LINE $0405 ldx #rottemp
FORCE_SYMBOL $0405 Draw_VL_mode
COMMENT_LINE $0408 increment the Test frame counter
COMMENT_LINE $0408 add more logic to set/increment SHAPE_f counters for desired animations
COMMENT_LINE $0408 ANIMATION PSEUDOCODE
COMMENT_LINE $0408 lda #10
COMMENT_LINE $0408 cmpa Arrow_f
COMMENT_LINE $0408 bne label
COMMENT_LINE $0408 inc Arrow_f
COMMENT_LINE $0408 bra donearrowf
COMMENT_LINE $0408 label:
COMMENT_LINE $0408 clr Arrow_f
COMMENT_LINE $0408 donearrowf
COMMENT_LINE $0408 PSEUDOCODE ABOVE
FORCE_NO_SYMBOL $0408
FORCE_SYMBOL $040A frm5cnt
FORCE_SYMBOL $040D frm5cnt
FORCE_SYMBOL $0412 frm5cnt
FORCE_SYMBOL $0415 Explode_f
FORCE_NO_SYMBOL $0418
FORCE_SYMBOL $041A frm10cnt
FORCE_SYMBOL $041D frm10cnt
FORCE_SYMBOL $0422 frm10cnt
FORCE_SYMBOL $0425 Bow_f
FORCE_NO_SYMBOL $0428
FORCE_SYMBOL $042A frm20cnt
FORCE_SYMBOL $042D frm20cnt
FORCE_SYMBOL $0432 frm20cnt
FORCE_NO_SYMBOL $0435
FORCE_SYMBOL $0437 frm25cnt
FORCE_SYMBOL $043A frm25cnt
FORCE_SYMBOL $043F frm25cnt
FORCE_NO_SYMBOL $0442
FORCE_SYMBOL $0444 frm50cnt
FORCE_SYMBOL $0447 frm50cnt
FORCE_SYMBOL $044C frm50cnt
FORCE_SYMBOL $044F Prize_f
COMMENT $0452 frame count 100=2 seconds (at full speed) 0-99 == 100
FORCE_NO_SYMBOL $0452
COMMENT_LINE $0454 frame freq 1, 2, 4, 5, 10, 20, 25,50, 100
COMMENT_LINE $0454 frame len .02, .04, .08, .1, .2, .4, .5, 1, 2
FORCE_SYMBOL $0454 frm100cnt
FORCE_SYMBOL $0457 frm100cnt
FORCE_SYMBOL $045D frm100cnt
COMMENT_LINE $0460 Reset all frame counts
COMMENT_LINE $0460 sta Arrow_f
FORCE_SYMBOL $0460 Bow_f
COMMENT_LINE $0463 sta Dash_f
COMMENT_LINE $0463 sta Wedge_f
COMMENT_LINE $0463 sta Ghost_f
FORCE_SYMBOL $0463 Prize_f
COMMENT_LINE $0466 sta Cannonball_f
FORCE_SYMBOL $0466 Tank_f
FORCE_SYMBOL $0469 Explode_f
COMMENT $046C and repeat forever
FORCE_SYMBOL $046C main
COMMENT_LINE $046F ###########################################################################
COMMENT_LINE $046F SUBROUTINES/FUNCTIONS
COMMENT_LINE $046F ###########################################################################
COMMENT $046F enable
FORCE_NO_SYMBOL $046F
FORCE_SYMBOL $0471 Vec_Joy_Mux_1_X
FORCE_NO_SYMBOL $0474
FORCE_SYMBOL $0476 Vec_Joy_Mux_1_Y
COMMENT $0479 disable for Joy Mux's
FORCE_NO_SYMBOL $0479
FORCE_SYMBOL $047B Vec_Joy_Mux_2_X
FORCE_SYMBOL $047E Vec_Joy_Mux_2_Y
COMMENT_LINE $0481 jsr Joy_Digital ; set joymode, not analog.
FORCE_SYMBOL $0481 highscore
FORCE_SYMBOL $0484 Clear_Score
FORCE_SYMBOL $0487 score
FORCE_SYMBOL $048A Clear_Score
COMMENT $048D set a bunch of variables to 0
FORCE_NO_SYMBOL $048D
FORCE_SYMBOL $048F bullet0e
FORCE_SYMBOL $0492 bullet1e
FORCE_SYMBOL $0495 bullet2e
FORCE_SYMBOL $0498 bullet3e
FORCE_SYMBOL $049B bullet4e
FORCE_SYMBOL $049E bullet5e
FORCE_SYMBOL $04A1 bullet6e
FORCE_SYMBOL $04A4 bullet0d
FORCE_SYMBOL $04A7 bullet1d
FORCE_SYMBOL $04AA bullet2d
FORCE_SYMBOL $04AD bullet3d
FORCE_SYMBOL $04B0 bullet4d
FORCE_SYMBOL $04B3 bullet5d
FORCE_SYMBOL $04B6 bullet6d
FORCE_SYMBOL $04B9 bullet0x
FORCE_SYMBOL $04BC bullet1x
FORCE_SYMBOL $04BF bullet2x
FORCE_SYMBOL $04C2 bullet3x
FORCE_SYMBOL $04C5 bullet4x
FORCE_SYMBOL $04C8 bullet5x
FORCE_SYMBOL $04CB bullet6x
FORCE_SYMBOL $04CE frm100cnt
FORCE_SYMBOL $04D1 frm50cnt
FORCE_SYMBOL $04D4 frm25cnt
FORCE_SYMBOL $04D7 frm20cnt
FORCE_SYMBOL $04DA frm10cnt
FORCE_SYMBOL $04DD frm5cnt
FORCE_SYMBOL $04E0 Arrow_f
FORCE_SYMBOL $04E3 Bow_f
FORCE_SYMBOL $04E6 Dash_f
FORCE_SYMBOL $04E9 Wedge_f
FORCE_SYMBOL $04EC Ghost_f
FORCE_SYMBOL $04EF Prize_f
FORCE_SYMBOL $04F2 Cannonball_f
FORCE_SYMBOL $04F5 Tank_f
FORCE_NO_SYMBOL $04F9
FORCE_SYMBOL $04FB VIA_t1_cnt_lo
FORCE_SYMBOL $04FF bullet_count
FORCE_SYMBOL $0502 bullet_count
FORCE_SYMBOL $0506 bullete_t
FORCE_NO_SYMBOL $050B
COMMENT $050D don't do motion on non-existant bullets X
FORCE_SYMBOL $050F bullet_count
COMMENT $0512 shift left == multiply by 2 table is 2 byte entry
FORCE_SYMBOL $0513 bulletx_t
COMMENT $0516 get pointer from table
COMMENT $0518 read from resolved address bulletNx
FORCE_NO_SYMBOL $0518
FORCE_SYMBOL $051C MOVEAMOUNT
COMMENT $051E if moving goes out of bounds destroy_bullet
FORCE_NO_SYMBOL $0520
FORCE_SYMBOL $0524 bullet_count
FORCE_SYMBOL $0528 bullete_t
FORCE_NO_SYMBOL $052D
FORCE_NO_SYMBOL $052F
FORCE_SYMBOL $0531 bullet_count
FORCE_SYMBOL $0535 bulletx_t
FORCE_NO_SYMBOL $053A
FORCE_NO_SYMBOL $053C
FORCE_SYMBOL $0540 MOVEAMOUNT
COMMENT $0542 if moving goes out of bounds destroy_bullet
FORCE_NO_SYMBOL $0544
FORCE_SYMBOL $0546 bullet_count
FORCE_SYMBOL $0549 bullet_count
FORCE_NO_SYMBOL $054C
FORCE_NO_SYMBOL $0553
COMMENT $0555 trying to make bullet brighter
FORCE_SYMBOL $0555 Vec_Dot_Dwell
FORCE_NO_SYMBOL $0558
FORCE_SYMBOL $055A bullet_count
FORCE_SYMBOL $055D bullet_count
COMMENT $0560 shift left == multiply by 2 table is 2 byte entry
FORCE_SYMBOL $0561 bullete_t
FORCE_NO_SYMBOL $0566
COMMENT $0568 Doesn't EXIST
COMMENT $056A reset before positioning beam
FORCE_NO_SYMBOL $056A
COMMENT $056D /BLANK low and /ZERO low
FORCE_SYMBOL $056D VIA_cntl
COMMENT $056F clear shift register
FORCE_SYMBOL $056F VIA_shift_reg
FORCE_NO_SYMBOL $0571
COMMENT $0574 clear D/A register
FORCE_SYMBOL $0574 VIA_port_a
COMMENT $0576 mux=1, disable mux
FORCE_SYMBOL $0576 VIA_port_b
COMMENT $0578 mux=1, enable mux
FORCE_SYMBOL $0578 VIA_port_b
COMMENT $057A do it again
FORCE_SYMBOL $057A VIA_port_b
FORCE_NO_SYMBOL $057C
COMMENT $057E disable mu
FORCE_SYMBOL $057E VIA_port_b
COMMENT_LINE $0580 find Y pos
FORCE_SYMBOL $0580 bullet_count
COMMENT $0583 single mbyte table no asla
FORCE_SYMBOL $0583 bulletYpos_t
COMMENT $0586 do look up for Y pos from table TODO
FORCE_SYMBOL $0588 bulletYtemp
COMMENT_LINE $058B find X pos
FORCE_SYMBOL $058B bullet_count
COMMENT $058E shift left == multiply by 2 table is 2 byte entry
FORCE_SYMBOL $058F bulletx_t
COMMENT $0592 get pointer from table
COMMENT $0594 read from resolved address bulletNx
FORCE_NO_SYMBOL $0594
FORCE_SYMBOL $0596 bulletYtemp
COMMENT $0599 Store Y in D/A register
FORCE_SYMBOL $0599 VIA_port_a
COMMENT $059B Enable mux
FORCE_SYMBOL $059B VIA_port_b
COMMENT $059D Save D-register on stack
COMMENT $059F Blank low, zero high?
FORCE_NO_SYMBOL $059F
FORCE_SYMBOL $05A1 VIA_cntl
COMMENT $05A3 Clear shift regigster
FORCE_SYMBOL $05A3 VIA_shift_reg
COMMENT $05A5 Disable mux
FORCE_SYMBOL $05A5 VIA_port_b
COMMENT $05A7 Store X in D/A register
FORCE_SYMBOL $05A7 VIA_port_a
COMMENT $05A9 timer 1 count high
FORCE_SYMBOL $05A9 VIA_t1_cnt_hi
COMMENT $05AB Get back D-reg
FORCE_SYMBOL $05AD Abs_a_b
FORCE_NO_SYMBOL $05B4
FORCE_NO_SYMBOL $05B6
FORCE_NO_SYMBOL $05BA
FORCE_NO_SYMBOL $05BE
COMMENT $05C2 Wait for timer 1
FORCE_NO_SYMBOL $05C2
FORCE_SYMBOL $05C4 VIA_int_flags
COMMENT $05C8 Delay a moment
COMMENT $05CD Wait for timer 1
FORCE_SYMBOL $05CD VIA_int_flags
COMMENT_LINE $05D1 ldx #Shot
COMMENT_LINE $05D1 jsr Draw_VL_mode
COMMENT_LINE $05D1 jsr Dot_here
COMMENT_LINE $05D1 draw dot code inlined
COMMENT $05D1 Set pattern to all 1's
FORCE_NO_SYMBOL $05D1
COMMENT $05D3 Store in VIA shift register
FORCE_SYMBOL $05D3 VIA_shift_reg
COMMENT $05D5 Get dot dwell (brightness)
FORCE_SYMBOL $05D5 Vec_Dot_Dwell
COMMENT $05D8 Delay leaving beam in place
COMMENT $05DB Blank beam in VIA shift register
FORCE_SYMBOL $05DB VIA_shift_reg
COMMENT_LINE $05DD END draw dot inline END
FORCE_SYMBOL $05DD bullet_count
FORCE_SYMBOL $05E0 bullet_count
FORCE_NO_SYMBOL $05E3
FORCE_SYMBOL $05E7 bstart
FORCE_NO_SYMBOL $05EA
FORCE_SYMBOL $05EC Vec_Dot_Dwell
FORCE_NO_SYMBOL $05EF
COMMENT $05F1 Store intensity in D/A
FORCE_SYMBOL $05F1 VIA_port_a
COMMENT $05F3 Save intensity in $C827
FORCE_SYMBOL $05F3 Vec_Brightness
COMMENT $05F6 mux disabled channel 2
FORCE_NO_SYMBOL $05F6
FORCE_SYMBOL $05F9 VIA_port_b
COMMENT $05FB mux enabled channel 2
FORCE_SYMBOL $05FB VIA_port_b
COMMENT $05FD do it again just because
FORCE_SYMBOL $05FD VIA_port_b
FORCE_NO_SYMBOL $05FF
COMMENT $0601 turn off mux
FORCE_SYMBOL $0601 VIA_port_b
RANGE $0000-$000B CHAR_DATA 11
RANGE $000B-$000D DW_DATA 1
RANGE $000D-$0011 DB_DATA 4
RANGE $0011-$0019 CHAR_DATA 8
RANGE $0019-$001A DB_DATA 1
RANGE $001A-$0604 CODE

